name: CI Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  nginx-config-validation:
    name: Validate Nginx Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Nginx
      run: |
        sudo apt-get update
        sudo apt-get install -y nginx
        
    - name: Test Nginx Configuration Syntax
      run: |
        # Create a backup of original config
        sudo cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.orig
        
        # Create logs directory for testing
        sudo mkdir -p /logs
        
        # Create a test version of the config with correct user
        sed 's/user  nginx;/user  www-data;/' config/nginx.conf > /tmp/nginx.conf.test
        
        # Copy test config files to nginx directory for testing
        sudo cp /tmp/nginx.conf.test /etc/nginx/nginx.conf
        sudo cp config/conf.d/default.conf /etc/nginx/conf.d/
        
        # Test configuration syntax
        sudo nginx -t
        
        # Restore original config
        sudo cp /etc/nginx/nginx.conf.orig /etc/nginx/nginx.conf
        
    - name: Check for common nginx security issues
      run: |
        echo "Checking for common security misconfigurations..."
        
        # Check if server tokens are disabled (security best practice)
        if grep -q "server_tokens off" config/nginx.conf; then
          echo "‚úÖ Server tokens are disabled"
        else
          echo "‚ö†Ô∏è  Consider adding 'server_tokens off;' to hide nginx version"
        fi
        
        # Check for SSL/TLS configuration (if present)
        if grep -q "ssl_" config/nginx.conf config/conf.d/*.conf; then
          echo "üîç SSL configuration detected - manual review recommended"
        fi
        
        # Check for potential directory traversal issues
        if grep -q "\.\." config/nginx.conf config/conf.d/*.conf; then
          echo "‚ö†Ô∏è  Potential directory traversal patterns found - review needed"
          exit 1
        else
          echo "‚úÖ No obvious directory traversal issues found"
        fi

  html-validation:
    name: Validate HTML Content
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install HTML validator
      run: |
        sudo apt-get update
        sudo apt-get install -y tidy
        
    - name: Validate HTML files
      run: |
        echo "Validating HTML files..."
        find site -name "*.html" -type f | while read file; do
          echo "Checking $file..."
          if tidy -q -e "$file"; then
            echo "‚úÖ $file is valid HTML"
          else
            echo "‚ö†Ô∏è  $file has HTML issues (warnings/errors above)"
            # Don't fail on tidy warnings, just report them
          fi
        done
        
    - name: Check for broken internal links
      run: |
        echo "Checking for basic HTML structure..."
        find site -name "*.html" -type f | while read file; do
          if grep -q "<html" "$file" || grep -q "<!DOCTYPE" "$file"; then
            echo "‚úÖ $file has proper HTML structure"
          else
            echo "‚ÑπÔ∏è  $file might be a template or fragment"
          fi
        done

  docker-integration-test:
    name: Docker Integration Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create test Dockerfile
      run: |
        cat > Dockerfile.test << 'EOF'
        FROM nginx:alpine
        
        # Copy configuration files (note: nginx:alpine uses nginx user by default)
        COPY config/nginx.conf /etc/nginx/nginx.conf
        COPY config/conf.d/ /etc/nginx/conf.d/
        COPY config/mime.types /etc/nginx/mime.types
        
        # Copy static content
        COPY site/ /site/
        
        # Create logs directory
        RUN mkdir -p /logs
        
        # Test configuration (nginx:alpine has nginx user available)
        RUN nginx -t
        
        EXPOSE 80
        CMD ["nginx", "-g", "daemon off;"]
        EOF
        
    - name: Build Docker image
      run: |
        docker build -f Dockerfile.test -t nginx-config-test .
        
    - name: Run container test
      run: |
        # Start container in background
        docker run -d --name nginx-test -p 8080:80 nginx-config-test
        
        # Wait for container to start
        sleep 5
        
        # Test if nginx is responding
        if curl -f http://localhost:8080 > /dev/null 2>&1; then
          echo "‚úÖ Nginx container is responding"
        else
          echo "‚ùå Nginx container is not responding"
          docker logs nginx-test
          exit 1
        fi
        
        # Check if error pages are accessible
        for code in 404 403 401 405; do
          if curl -f "http://localhost:8080/${code}.html" > /dev/null 2>&1; then
            echo "‚úÖ Error page ${code}.html is accessible"
          else
            echo "‚ö†Ô∏è  Error page ${code}.html might not be accessible"
          fi
        done
        
        # Cleanup
        docker stop nginx-test
        docker rm nginx-test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security checks
      run: |
        echo "Running basic security checks on nginx configuration..."
        
        # Check for hardcoded sensitive information
        echo "Checking for potential secrets..."
        if grep -r -i "password\|secret\|key\|token" config/ --exclude-dir=.git; then
          echo "‚ö†Ô∏è  Potential sensitive information found - please review"
        else
          echo "‚úÖ No obvious sensitive information in config files"
        fi
        
        # Check for secure headers configuration
        echo "Checking for security headers..."
        if grep -r "add_header.*X-Frame-Options\|add_header.*X-Content-Type-Options\|add_header.*X-XSS-Protection" config/; then
          echo "‚úÖ Some security headers are configured"
        else
          echo "‚ÑπÔ∏è  Consider adding security headers (X-Frame-Options, X-Content-Type-Options, etc.)"
        fi
        
        # Check for proper file permissions in scripts
        if [ -f commit.sh ]; then
          if [[ $(stat -c %a commit.sh) == "755" ]]; then
            echo "‚úÖ commit.sh has proper executable permissions"
          else
            echo "‚ÑπÔ∏è  commit.sh permissions: $(stat -c %a commit.sh)"
          fi
        fi

  comprehensive-test:
    name: Comprehensive Validation
    runs-on: ubuntu-latest
    needs: [nginx-config-validation, html-validation, docker-integration-test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Final validation summary
      run: |
        echo "üéâ All individual tests passed!"
        echo "‚úÖ Nginx configuration syntax is valid"
        echo "‚úÖ HTML content validation completed"
        echo "‚úÖ Docker integration test passed"
        echo "‚úÖ Security scan completed"
        echo ""
        echo "Configuration summary:"
        echo "- Main config: $(wc -l < config/nginx.conf) lines"
        echo "- Default config: $(wc -l < config/conf.d/default.conf) lines"
        echo "- HTML files: $(find site -name '*.html' | wc -l) files"
        echo "- Total files in site/: $(find site -type f | wc -l) files"